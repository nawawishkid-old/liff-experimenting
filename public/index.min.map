{"version":3,"sources":["InputSchemeFactory.js","message-fields.js","index.js"],"names":["InputSchemeFactory","isString","value","isNumber","isArray","Array","isFunction","isObject","constructor","Object","isUndefined","throwIf","test","message","Error","throwIfNotType","type","isThatType","TypeError","TYPE_VALIDATOR_OBJ","validator","Function","String","TYPE_OPTIONS","title","validateType","obj","keys","every","key","name","defaultAttributes","_resetFieldData","data","fieldData","_setAttr","options","_setOptions","pattern","number","opt","_setExtra","validatorObj","validators","push","newValue","isMerge","oldValue","attributes","_createValueFromClassApiCall","_getDefaultFieldData","rest","newAttrs","isf","required","createMessageFields","fields","getMessageTypeField","hidden","get","httpsUrl","length","getTextLengthValidator","limit","text","image","location","window","schemes"],"mappings":"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","file":"index.min.map","sourceRoot":"../src/client","sourcesContent":["const isString = value => typeof value === \"string\";\r\nconst isNumber = value => typeof value === \"number\";\r\nconst isArray = value => Array.isArray(value);\r\nconst isFunction = value => typeof value === \"function\";\r\nconst isObject = value => value.constructor === Object;\r\nconst isUndefined = value => typeof value === \"undefined\";\r\nconst throwIf = (test, message) => {\r\n  if (test) {\r\n    throw new Error(message);\r\n  }\r\n\r\n  return true;\r\n};\r\nconst throwIfNotType = (type, value) => {\r\n  let isThatType;\r\n\r\n  switch (type) {\r\n    case \"string\":\r\n      isThatType = isString(value);\r\n      break;\r\n\r\n    case \"number\":\r\n      isThatType = isNumber(value);\r\n      break;\r\n\r\n    case \"array\":\r\n      isThatType = isArray(value);\r\n      break;\r\n\r\n    default:\r\n      throw new TypeError(\"Invalid type given to test.\");\r\n  }\r\n\r\n  return throwIf(!isThatType, `Expected ${type}, ${typeof value} given.`);\r\n};\r\n\r\nconst TYPE_VALIDATOR_OBJ = { validator: Function, message: String };\r\nconst TYPE_OPTIONS = { title: String, value: \"*\" };\r\n\r\nconst validateType = (type, obj) =>\r\n  Object.keys(type).every(key => {\r\n    if (type[key] === \"*\") {\r\n      return true;\r\n    }\r\n\r\n    return typeof obj[key] === type[key].name;\r\n  });\r\n\r\nclass InputSchemeFactory {\r\n  fieldData = {};\r\n  defaultAttributes = {};\r\n\r\n  constructor(defaultAttributes = {}) {\r\n    this.defaultAttributes = defaultAttributes;\r\n    this._resetFieldData();\r\n  }\r\n\r\n  get() {\r\n    const data = { ...this.fieldData };\r\n\r\n    this._resetFieldData();\r\n\r\n    return data;\r\n  }\r\n\r\n  text(name) {\r\n    return this._setAttr({ type: \"text\", name });\r\n  }\r\n\r\n  number(name) {\r\n    return this._setAttr({ type: \"number\", name });\r\n  }\r\n\r\n  select(name, options = []) {\r\n    return this._setAttr({ type: \"select\", name })._setOptions(options);\r\n  }\r\n\r\n  bool(name) {\r\n    return this._setAttr({ type: \"select\", name })._setOptions([true, false]);\r\n  }\r\n\r\n  hidden(name) {\r\n    return this._setAttr({ type: \"hidden\", name });\r\n  }\r\n\r\n  value(value) {\r\n    return this._setAttr(\"value\", value);\r\n  }\r\n\r\n  /**\r\n   * HTML5 'pattern' attribute for validation.\r\n   *\r\n   * @param {string} pattern\r\n   */\r\n  pattern(pattern) {\r\n    throwIfNotType(\"string\", pattern);\r\n\r\n    return this._setAttr(\"pattern\", pattern);\r\n  }\r\n\r\n  required() {\r\n    return this._setAttr(\"required\", true);\r\n  }\r\n\r\n  optional() {\r\n    return this._setAttr(\"required\", false);\r\n  }\r\n\r\n  /**\r\n   * <input type=\"number\" step={number} />\r\n   *\r\n   * @param {number} step\r\n   */\r\n  step(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"step\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"step\", number);\r\n  }\r\n\r\n  min(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"min\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"min\", number);\r\n  }\r\n\r\n  max(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"max\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"max\", number);\r\n  }\r\n\r\n  /**\r\n   * <option> for <select>\r\n   *\r\n   * @param {array} options\r\n   */\r\n  options(options) {\r\n    throwIf(\r\n      this.fieldData.type !== \"select\",\r\n      'Input type must be \"select\" before set options'\r\n    );\r\n\r\n    throwIfNotType(\"array\", options);\r\n\r\n    throwIf(\r\n      options.every(opt => validateType(TYPE_OPTIONS, opt)),\r\n      \"Option object must be { title, value }\"\r\n    );\r\n\r\n    return this._setExtra(\"options\", options);\r\n  }\r\n\r\n  validator(validatorObj) {\r\n    throwIf(\r\n      validateType(TYPE_VALIDATOR_OBJ, validatorObj),\r\n      'validatorObj.validator must be a \"function\" and validatorObj.message must be a \"string\"'\r\n    );\r\n\r\n    this.fieldData.validators.push(validatorObj);\r\n\r\n    return this;\r\n  }\r\n\r\n  _setAttr(key, newValue, isMerge = false) {\r\n    const oldValue = this.fieldData.attributes[key];\r\n\r\n    this.fieldData.attributes[key] = this._createValueFromClassApiCall(\r\n      key,\r\n      newValue,\r\n      oldValue,\r\n      isMerge\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  _setExtra(key, newValue, isMerge = false) {\r\n    const oldValue = this.fieldData[key];\r\n\r\n    this.fieldData[key] = this._createValueFromClassApiCall(\r\n      key,\r\n      newValue,\r\n      oldValue,\r\n      isMerge\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  _createValueFromClassApiCall(key, newValue, oldValue, isMerge = false) {\r\n    let value;\r\n\r\n    if (isObject(key)) {\r\n      value = { ...oldValue, ...key };\r\n    } else if (isArray(newValue) && isArray(oldValue) && isMerge) {\r\n      value = [...oldValue, ...newValue];\r\n    } else if (isObject(newValue) && isObject(oldValue) && isMerge) {\r\n      value = { ...oldValue, ...newValue };\r\n    } else {\r\n      value = newValue;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  _resetFieldData() {\r\n    const { attributes, ...rest } = this._getDefaultFieldData();\r\n    const newAttrs = { ...attributes, ...this.defaultAttributes };\r\n\r\n    this.fieldData = {\r\n      ...rest,\r\n      ...newAttrs\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n  _getDefaultFieldData() {\r\n    return {\r\n      attributes: {\r\n        type: \"text\",\r\n        name: null,\r\n        value: null\r\n      },\r\n      validators: []\r\n    };\r\n  }\r\n}\r\n\r\nexport default InputSchemeFactory;\r\n","import InputSchemeFactory from \"./InputSchemeFactory\";\r\n\r\nconst isf = new InputSchemeFactory({ required: true });\r\nconst createMessageFields = (type, ...fields) => [\r\n  getMessageTypeField(type),\r\n  ...fields\r\n];\r\n\r\nconst getMessageTypeField = type =>\r\n  isf\r\n    .hidden(\"message_type\")\r\n    .value(type)\r\n    .get();\r\n\r\n/**\r\n * **********\r\n * VALIDATORS\r\n * **********\r\n */\r\nconst validator = {\r\n  httpsUrl: {\r\n    // https://developers.line.biz/en/reference/messaging-api/#image-message\r\n    validator: value => /^https:\\/\\/.*/g.test(value) && value.length <= 1000,\r\n    message: \"Image URL scheme must be HTTPS\"\r\n  },\r\n  getTextLengthValidator: limit => ({\r\n    validator: value => value.length <= limit,\r\n    message: `Text length must not exceed ${limit} characters`\r\n  })\r\n};\r\n/**\r\n * **********\r\n * FIELDS\r\n * **********\r\n */\r\nexport const text = createMessageFields(\r\n  \"text\",\r\n  isf\r\n    .text(\"text\")\r\n    .validator(validator.getTextLengthValidator(2000))\r\n    .get()\r\n);\r\n\r\nexport const image = createMessageFields(\r\n  \"image\",\r\n  isf\r\n    .text(\"originalContentUrl\")\r\n    .validator(validator.httpsUrl)\r\n    .get(),\r\n  isf\r\n    .text(\"previewImageUrl\")\r\n    .validator(validator.httpsUrl)\r\n    .get()\r\n);\r\n\r\nexport const location = createMessageFields(\r\n  \"location\",\r\n  isf\r\n    .text(\"title\")\r\n    .validator(validator.getTextLengthValidator(100))\r\n    .get(),\r\n  isf\r\n    .text(\"address\")\r\n    .validator(validator.getTextLengthValidator(100))\r\n    .get(),\r\n  isf\r\n    .number(\"lattitude\")\r\n    .validator({\r\n      validator: value => value >= -90 && value <= 90,\r\n      message: \"Invalid lattitude value. Valid range is -90 - 90.\"\r\n    })\r\n    .get(),\r\n  isf\r\n    .number(\"longitude\")\r\n    .validator({\r\n      validator: value => value >= -180 && value <= 180,\r\n      message: \"Invalid logitude value. Valid range is -180 - 180.\"\r\n    })\r\n    .get()\r\n);\r\n","import * as schemes from \"./message-fields\";\r\n\r\nwindow.schemes = schemes;\r\n"]}