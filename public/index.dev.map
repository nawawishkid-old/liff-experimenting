{"version":3,"sources":["InputSchemeFactory.js","message-fields.js","index.js"],"names":["isString","value","isNumber","isArray","Array","isFunction","isObject","constructor","Object","isUndefined","throwIf","test","message","Error","throwIfNotType","type","isThatType","TypeError","TYPE_VALIDATOR_OBJ","validator","Function","String","TYPE_OPTIONS","title","validateType","obj","keys","every","key","name","InputSchemeFactory","defaultAttributes","_resetFieldData","data","fieldData","_setAttr","options","_setOptions","pattern","number","opt","_setExtra","validatorObj","validators","push","newValue","isMerge","forEach","k","oldValue","attributes","_createValueFromClassApiCall","_getDefaultFieldData","rest","isf","required","createMessageFields","fields","getMessageTypeField","hidden","get","httpsUrl","length","getTextLengthValidator","limit","text","image","location","window","schemes"],"mappings":"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","file":"index.dev.map","sourceRoot":"../src/client","sourcesContent":["const isString = value => typeof value === \"string\";\r\nconst isNumber = value => typeof value === \"number\";\r\nconst isArray = value => Array.isArray(value);\r\nconst isFunction = value => typeof value === \"function\";\r\nconst isObject = value => value.constructor === Object;\r\nconst isUndefined = value => typeof value === \"undefined\";\r\nconst throwIf = (test, message) => {\r\n  if (test) {\r\n    throw new Error(message);\r\n  }\r\n\r\n  return true;\r\n};\r\nconst throwIfNotType = (type, value) => {\r\n  let isThatType;\r\n\r\n  switch (type) {\r\n    case \"string\":\r\n      isThatType = isString(value);\r\n      break;\r\n\r\n    case \"number\":\r\n      isThatType = isNumber(value);\r\n      break;\r\n\r\n    case \"array\":\r\n      isThatType = isArray(value);\r\n      break;\r\n\r\n    default:\r\n      throw new TypeError(\"Invalid type given to test.\");\r\n  }\r\n\r\n  return throwIf(!isThatType, `Expected ${type}, ${typeof value} given.`);\r\n};\r\n\r\nconst TYPE_VALIDATOR_OBJ = { validator: Function, message: String };\r\nconst TYPE_OPTIONS = { title: String, value: \"*\" };\r\n\r\nconst validateType = (type, obj) =>\r\n  Object.keys(type).every(key => {\r\n    if (type[key] === \"*\") {\r\n      return true;\r\n    }\r\n\r\n    return typeof obj[key] === type[key].name;\r\n  });\r\n\r\nclass InputSchemeFactory {\r\n  fieldData = {};\r\n  defaultAttributes = {};\r\n\r\n  constructor(defaultAttributes = {}) {\r\n    this.defaultAttributes = defaultAttributes;\r\n    this._resetFieldData();\r\n  }\r\n\r\n  get() {\r\n    const data = { ...this.fieldData };\r\n\r\n    this._resetFieldData();\r\n\r\n    return data;\r\n  }\r\n\r\n  text(name) {\r\n    return this._setAttr({ type: \"text\", name });\r\n  }\r\n\r\n  number(name) {\r\n    return this._setAttr({ type: \"number\", name });\r\n  }\r\n\r\n  select(name, options = []) {\r\n    return this._setAttr({ type: \"select\", name })._setOptions(options);\r\n  }\r\n\r\n  bool(name) {\r\n    return this._setAttr({ type: \"select\", name })._setOptions([true, false]);\r\n  }\r\n\r\n  hidden(name) {\r\n    return this._setAttr({ type: \"hidden\", name });\r\n  }\r\n\r\n  value(value) {\r\n    return this._setAttr(\"value\", value);\r\n  }\r\n\r\n  /**\r\n   * HTML5 'pattern' attribute for validation.\r\n   *\r\n   * @param {string} pattern\r\n   */\r\n  pattern(pattern) {\r\n    throwIfNotType(\"string\", pattern);\r\n\r\n    return this._setAttr(\"pattern\", pattern);\r\n  }\r\n\r\n  required() {\r\n    return this._setAttr(\"required\", true);\r\n  }\r\n\r\n  optional() {\r\n    return this._setAttr(\"required\", false);\r\n  }\r\n\r\n  /**\r\n   * <input type=\"number\" step={number} />\r\n   *\r\n   * @param {number} step\r\n   */\r\n  step(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"step\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"step\", number);\r\n  }\r\n\r\n  min(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"min\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"min\", number);\r\n  }\r\n\r\n  max(number) {\r\n    const { type } = this.fieldData;\r\n\r\n    throwIf(\r\n      type !== \"number\" || type !== \"text\",\r\n      'Input type must be \"number\" or \"text\" before set \"max\" attribute'\r\n    );\r\n\r\n    return this._setAttr(\"max\", number);\r\n  }\r\n\r\n  /**\r\n   * <option> for <select>\r\n   *\r\n   * @param {array} options\r\n   */\r\n  options(options) {\r\n    throwIf(\r\n      this.fieldData.type !== \"select\",\r\n      'Input type must be \"select\" before set options'\r\n    );\r\n\r\n    throwIfNotType(\"array\", options);\r\n\r\n    throwIf(\r\n      options.every(opt => validateType(TYPE_OPTIONS, opt)),\r\n      \"Option object must be { title, value }\"\r\n    );\r\n\r\n    return this._setExtra(\"options\", options);\r\n  }\r\n\r\n  validator(validatorObj) {\r\n    throwIf(\r\n      validateType(TYPE_VALIDATOR_OBJ, validatorObj),\r\n      'validatorObj.validator must be a \"function\" and validatorObj.message must be a \"string\"'\r\n    );\r\n\r\n    this.fieldData.validators.push(validatorObj);\r\n\r\n    return this;\r\n  }\r\n\r\n  _setAttr(key, newValue, isMerge = false) {\r\n    if (isObject(key)) {\r\n      Object.keys(key).forEach(k => this._setAttr(k, key[k]));\r\n\r\n      return this;\r\n    }\r\n\r\n    const oldValue = this.fieldData.attributes[key];\r\n\r\n    this.fieldData.attributes[key] = this._createValueFromClassApiCall(\r\n      newValue,\r\n      oldValue,\r\n      isMerge\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  _setExtra(key, newValue, isMerge = false) {\r\n    if (isObject(key)) {\r\n      Object.keys(key).forEach(k => this._setExtra(k, key[k]));\r\n\r\n      return this;\r\n    }\r\n\r\n    const oldValue = this.fieldData[key];\r\n\r\n    this.fieldData[key] = this._createValueFromClassApiCall(\r\n      newValue,\r\n      oldValue,\r\n      isMerge\r\n    );\r\n\r\n    return this;\r\n  }\r\n\r\n  _createValueFromClassApiCall(newValue, oldValue, isMerge = false) {\r\n    let value;\r\n\r\n    if (isArray(newValue) && isArray(oldValue) && isMerge) {\r\n      value = [...oldValue, ...newValue];\r\n    } else if (isObject(newValue) && isObject(oldValue) && isMerge) {\r\n      value = { ...oldValue, ...newValue };\r\n    } else {\r\n      value = newValue;\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  _resetFieldData() {\r\n    const { attributes, ...rest } = this._getDefaultFieldData();\r\n\r\n    this.fieldData = {\r\n      ...rest,\r\n      attributes: { ...attributes, ...this.defaultAttributes }\r\n    };\r\n\r\n    return this;\r\n  }\r\n\r\n  _getDefaultFieldData() {\r\n    return {\r\n      attributes: {\r\n        type: \"text\",\r\n        name: null,\r\n        value: null\r\n      },\r\n      validators: []\r\n    };\r\n  }\r\n}\r\n\r\nexport default InputSchemeFactory;\r\n","import InputSchemeFactory from \"./InputSchemeFactory\";\r\n\r\nconst isf = new InputSchemeFactory({ required: true });\r\nconst createMessageFields = (type, ...fields) => [\r\n  getMessageTypeField(type),\r\n  ...fields\r\n];\r\n\r\nconst getMessageTypeField = type =>\r\n  isf\r\n    .hidden(\"message_type\")\r\n    .value(type)\r\n    .get();\r\n\r\n/**\r\n * **********\r\n * VALIDATORS\r\n * **********\r\n */\r\nconst validator = {\r\n  httpsUrl: {\r\n    // https://developers.line.biz/en/reference/messaging-api/#image-message\r\n    validator: value => /^https:\\/\\/.*/g.test(value) && value.length <= 1000,\r\n    message: \"Image URL scheme must be HTTPS\"\r\n  },\r\n  getTextLengthValidator: limit => ({\r\n    validator: value => value.length <= limit,\r\n    message: `Text length must not exceed ${limit} characters`\r\n  })\r\n};\r\n/**\r\n * **********\r\n * FIELDS\r\n * **********\r\n */\r\nexport const text = createMessageFields(\r\n  \"text\",\r\n  isf\r\n    .text(\"text\")\r\n    .validator(validator.getTextLengthValidator(2000))\r\n    .get()\r\n);\r\n\r\nexport const image = createMessageFields(\r\n  \"image\",\r\n  isf\r\n    .text(\"originalContentUrl\")\r\n    .validator(validator.httpsUrl)\r\n    .get(),\r\n  isf\r\n    .text(\"previewImageUrl\")\r\n    .validator(validator.httpsUrl)\r\n    .get()\r\n);\r\n\r\nexport const location = createMessageFields(\r\n  \"location\",\r\n  isf\r\n    .text(\"title\")\r\n    .validator(validator.getTextLengthValidator(100))\r\n    .get(),\r\n  isf\r\n    .text(\"address\")\r\n    .validator(validator.getTextLengthValidator(100))\r\n    .get(),\r\n  isf\r\n    .number(\"lattitude\")\r\n    .validator({\r\n      validator: value => value >= -90 && value <= 90,\r\n      message: \"Invalid lattitude value. Valid range is -90 - 90.\"\r\n    })\r\n    .get(),\r\n  isf\r\n    .number(\"longitude\")\r\n    .validator({\r\n      validator: value => value >= -180 && value <= 180,\r\n      message: \"Invalid longitude value. Valid range is -180 - 180.\"\r\n    })\r\n    .get()\r\n);\r\n","import * as schemes from \"./message-fields\";\r\n\r\nwindow.schemes = schemes;\r\n"]}